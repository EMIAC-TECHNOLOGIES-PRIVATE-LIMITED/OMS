// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"

  // url = env("DATABASE_URL")
  url = "postgresql://postgres:randompassword@localhost:5432/mydb?schema=public"
}

enum ClientPaymentStatus {
  Received
  PartiallyReceived
  Pending
  NotReceived
}

enum VendorPaymentStatus {
  Hold
  Unpaid
  Paid
  PartiallyPaid
  Cancel
}

enum OrderStatus {
  Pending
  Given
  Publish
  NotPublish
  Cancel
  Replacement
  NeedUpdate
}

enum VendorInvoiceStatus {
  Pending
  Ask
  Received
  Given
  Paid
}

enum SiteClassification {
  Normal
  Casino
  Cbd
  Adult
}

enum linkAttribute {
  DoFollow
  NoFollow
  Sponsored
}

enum PriceCategory {
  Paid
  Free
  Exchange
}

enum WebsiteType {
  Default
  PR
  Language
}

enum WebsiteStatus {
  Normal
  Blacklist
  Disqualified
}

enum WebsiteQuality {
  Pure
  AlmostPure
  Multi
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  permissions Permission[] @relation("RolePermissions")
  resources   Resource[]   @relation("RoleResources")
  users       User[]
}

model Permission {
  id                  Int                  @id @default(autoincrement())
  key                 String               @unique
  description         String
  roles               Role[]               @relation("RolePermissions")
  permissionOverrides PermissionOverride[]
}

model Resource {
  id                Int                @id @default(autoincrement())
  key               String             @unique
  description       String
  roles             Role[]             @relation("RoleResources")
  resourceOverrides ResourceOverride[]
}

model PermissionOverride {
  id           Int        @id @default(autoincrement())
  userId       Int
  user         User       @relation(fields: [userId], references: [id])
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  granted      Boolean

  @@unique([userId, permissionId])
  @@index([userId, permissionId])
}

model ResourceOverride {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  resourceId Int
  resource   Resource @relation(fields: [resourceId], references: [id])
  granted    Boolean

  @@unique([userId, resourceId])
  @@index([userId, resourceId])
}

model View {
  id       Int    @id @default(autoincrement())
  userId   Int
  user     User   @relation(fields: [userId], references: [id])
  viewName String

  tableId      String
  filterConfig Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model User {
  id        Int     @id @default(autoincrement())
  name      String
  email     String  @unique
  suspended Boolean @default(false)
  password  String

  permissionOverrides PermissionOverride[]
  resourceOverrides   ResourceOverride[]
  refreshToken        String[]

  clients Client[]
  orders  Order[]
  sites   Site[]
  views   View[]
  vendors Vendor[]

  roleId Int
  role   Role @relation(fields: [roleId], references: [id])

  @@index([roleId])
}

enum VendorCategory {
  Individual
  Agency
}

model Vendor {
  id            Int             @id @default(autoincrement())
  name          String
  phone         String?
  email         String?
  pitchedFrom   String?
  bankName      String?
  accountNumber String?
  ifscCode      String?
  paypalId      String?
  skypeId       String?
  upiId         String?
  sites         Site[]
  category      VendorCategory?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  pocId Int?
  poc   User? @relation(fields: [pocId], references: [id])
}

model Site {
  id                 Int                @id @default(autoincrement())
  website            String
  niche              String
  contentCategories  String
  siteClassification SiteClassification @default(Normal)
  priceCategory      PriceCategory?     @default(Paid)

  domainAuthority    Int
  pageAuthority      Int
  linkAttribute      linkAttribute? @default(DoFollow)
  ahrefTraffic       Int?
  spamScore          Int
  domainRating       Int?
  socialMediaPosting Boolean?

  costPrice         Int
  sellingPrice      Int
  discount          Int?
  adultPrice        Int?
  casinoAdultPrice  Int?
  cbdPrice          Int?
  linkInsertionCost Int?

  websiteRemark  String?
  webIP          String?
  webCountry     String?
  turnAroundTime String?

  semrushTraffic              Int
  semrushFirstCountryName     String?
  semrushSecondCountryName    String?
  semrushFirstCountryTraffic  Int?
  semrushSecondCountryTraffic Int?
  semrushThirdCountryName     String?
  semrushThirdCountryTraffic  Int?
  semrushFourthCountryName    String?
  semrushFourthCountryTraffic Int?
  semrushFifthCountryName     String?
  semrushFifthCountryTraffic  Int?
  similarwebTraffic           Int?

  siteUpdateDate   DateTime?    @updatedAt()
  websiteType      WebsiteType? @default(Default)
  language         String?
  disclaimer       String?
  anchorText       Boolean?
  bannerImagePrice Int?

  costPriceUpdateDate              DateTime?
  pureCategory                     String?
  availability                     Boolean?        @default(false)
  isIndexed                        Boolean?
  websiteStatus                    WebsiteStatus   @default(Normal)
  websiteQuality                   WebsiteQuality? @default(Pure)
  numberOfLinks                    Int?
  semrushUpdateDate                DateTime?
  semrushOrganicTraffic            Int             @default(0)
  semrushOrganicTrafficLastUpdated DateTime        @default(now())

  createdAt DateTime @default(now())
  udpatedAt DateTime @updatedAt

  vendorId Int?    @default(1)
  vendor   Vendor? @relation(fields: [vendorId], references: [id])

  pocId Int?
  poc   User? @relation(fields: [pocId], references: [id])

  orders Order[] @relation("OrderSite")
}

model Client {
  id               Int     @id @default(autoincrement())
  name             String
  phone            String?
  email            String?
  fbId             String?
  contactedFrom    String?
  website          String?
  source           String?
  clientClientName String?
  projects         String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  orders Order[]

  pocId Int?  @default(1)
  poc   User? @relation(fields: [pocId], references: [id])

  @@index([pocId])
}

model Order {
  id        Int       @id @default(autoincrement())
  orderDate DateTime?

  orderStatus           OrderStatus @default(Pending)
  vendorAssignedDate    DateTime? // auto-update middleware
  orderStatusUpdateDate DateTime? // auto-update middleware
  publishDate           DateTime? // auto-update middleware
  publishURL            String?

  orderRemark         String?
  mainRemark          String?
  clientPaymentRemark String?

  clientContentCost    Int?
  clientProposedAmount Int?
  clientPaymentStatus  ClientPaymentStatus? @default(Pending)
  clientReceivedAmount Int?
  clientPaymentDate    DateTime?

  vendorInvoiceStatus VendorInvoiceStatus? @default(Pending)
  vendorPaymentStatus VendorPaymentStatus? @default(Unpaid)
  vendorPaymentDate   DateTime?
  vendorPaymentAmount Int?

  invoiceNumber    String?
  costPriceWithGST Int?

  indexedScreenShotLink String?

  siteId Int?
  site   Site? @relation("OrderSite", fields: [siteId], references: [id])

  salesPersonId Int?
  salesPerson   User? @relation(fields: [salesPersonId], references: [id])

  clientId Int?
  client   Client? @relation(fields: [clientId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId])
  @@index([salesPersonId])
}
